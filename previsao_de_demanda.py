# -*- coding: utf-8 -*-
"""Previsao de demanda.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pJt8XLWo_VCt6JUqP7TYr9wEUi0sa5qi

**Previs√£o de demanda para os pr√≥ximos 5 dias üìäüçÖ**
"""

!pip install -U https://github.com/pandas-profiling/pandas-profiling/archive/master.zip

!pip install -U pandas-profiling

import pandas_profiling as pp
from pandas_profiling import ProfileReport

"""**CARREGANDO A BASE DE DADOS E IMPORTANDO AS BIBLIOTECAS QUE SER√ÉO USADAS**"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

"""A base de dados era pequena, ent√£o manualmente no Excel, inseri mais uma coluna agrupando os dias por seu tipo,
fossem eles dias da semana ou n√£o, expandindo as probabilidades de insigths ao fazer a an√°lise explorat√≥ria, buscando uma correla√ß√£o com o volume de vendas e esses novos dados.
"""

base = pd.read_excel('/Dados.xlsx')
base.head()

base.describe()

plt.scatter(base['Data'], base['Vendas'])
plt.show()

plt.scatter(base['Tipo de dia'], base['Vendas'])
plt.show()

profile = ProfileReport(base, title="Dados Frexco")

profile.to_notebook_iframe()

plt.figure()
plt.title ('Rela√ß√£o vendas em fun√ß√£o do tipo de dia')
fig = sns.boxplot(x = 'Tipo de dia'
                  ,y = 'Vendas'
                  ,data = base[['Vendas','Tipo de dia']]
                  ,showfliers = False)

def split_data(df, data):
    df['dt_ref'] = pd.to_datetime(df[data])
    df['ano'] = df.dt_ref.dt.year
    df['m√™s'] = df.dt_ref.dt.month
    df['dia'] = df.dt_ref.dt.day
    df['semana do ano'] = df.dt_ref.dt.isocalendar().week
    df['periodo_dia'] = base.dt_ref.dt.to_period('D')

split_data(base, 'Data')

plt.figure(figsize = (30,10))
plt.title ('Varia√ß√£o do volume de vendas em rela√ß√£o ao dia do m√™s')
fig = sns.boxplot(x = 'dia'
                  ,y = 'Vendas'
                  ,data = base[['dia','Vendas']]
                  ,showfliers = False
                  )

"""**MODELO ARIMA**"""

from statsmodels.tsa.arima.model import ARIMA

dados = {'data': ['2022-12-06', '2022-12-07', '2022-12-08', '2022-12-09', '2022-12-10', '2022-12-11', '2022-12-12', 
                 '2022-12-13', '2022-12-14', '2022-12-15', '2022-12-16', '2022-12-17', '2022-12-18', '2022-12-19',
                 '2022-12-20', '2022-12-21', '2022-12-22', '2022-12-23', '2022-12-24', '2022-12-25', '2022-12-26',
                 '2022-12-27', '2022-12-28', '2022-12-29', '2022-12-30', '2022-12-31', '2023-01-01', '2023-01-02',
                 '2023-01-03', '2023-01-04', '2023-01-05', '2023-01-06', '2023-01-07', '2023-01-08', '2023-01-09',
                 '2023-01-10', '2023-01-11', '2023-01-12', '2023-01-13', '2023-01-14', '2023-01-15', '2023-01-16',
                 '2023-01-17', '2023-01-18', '2023-01-19', '2023-01-20'],
        'volume_vendas': [870, 868, 1189, 742, 317, 685, 1366, 1213, 1055, 1343, 832, 240, 235, 1050, 
                         711, 745, 1009, 18, 40, 67, 821, 572, 429, 638, 106, 54, 144, 814,
                         679, 712, 1229, 821, 319, 317, 1317, 807, 923, 1265, 892, 289, 566, 1692,
                          1097, 1302, 1405, 945]}

df_frexco = pd.DataFrame(dados)

# Convertendo a data para o formato de data do pandas
df_frexco['data'] = pd.to_datetime(df_frexco['data'])

# Definindo a s√©rie temporal com base no volume de vendas
sales_series = pd.Series(df_frexco['volume_vendas'].values, index=df_frexco['data'])

# Treinando o modelo
model = ARIMA(sales_series, order=(1, 1, 1))
model_fit = model.fit()

# Previs√£o para os pr√≥ximos dias
predictions = model_fit.forecast(steps=5)[0]

print("Previs√£o do volumde vendas para os pr√≥ximos dias:", predictions)

"""**MODELO DE REGRESS√ÉO LOG√çSTICA**"""

from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder

# Carregando os dados
df = pd.read_excel('/Dados.xlsx')

# Convertendo a coluna "Tipo de dia" para numeros
le = LabelEncoder()
df["Tipo de dia"] = le.fit_transform(df["Tipo de dia"])

# Separando os dados em treino e teste
X = df[["Tipo de dia"]]
y = df["Vendas"]

# Treinando o modelo
modelo = LogisticRegression()
modelo.fit(X, y)

# Prevendo o volume de vendas para os pr√≥ximos 5 dias
dias_proximos = np.array([[1], [1], [0], [0], [0]]) # 0 para dia de semana e 1 para final de semana
previsao = modelo.predict(dias_proximos)
print("Previs√£o do volume de vendas para os pr√≥ximos 5 dias:", previsao)

"""*O modelo pode ser aprimorado, a precis√£o da previs√£o demanda mais caracter√≠sticas, mais dados na base.

**MODELO RANDOM FOREST**
"""

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error

# Carregando os dados e crando uma coluna "Tipo de dia" com base na data
frexco = pd.read_excel('/DadosOrigem.xlsx')
frexco["Tipo de dia"] = frexco["Data"].apply(lambda x: "Dia de semana" if x.weekday() < 5 else "Final de semana")

# Transformando a coluna "Tipo de dia" em vari√°veis dummy
dummies = pd.get_dummies(df["Tipo de dia"])
frexco = pd.concat([frexco, dummies], axis=1)

# Definindo suas vari√°veis dependentes e independentes e dividindo em treinamento e teste
X = frexco.drop(["Data", "Tipo de dia", "Vendas"], axis=1)
y = frexco["Vendas"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Treinando o modelo
model = RandomForestRegressor(n_estimators=100)
model.fit(X_train, y_train)

# Fa√ßa previs√µes com base no modelo treinado
y_pred = model.predict(X_test)
print("Previs√£o do volume de vendas para os pr√≥ximos dias:", y_pred)

# Avalie o desempenho do modelo com a m√©trica de erro absoluto m√©dio
eam = mean_absolute_error(y_test, y_pred)
print("Erro absoluto m√©dio:", eam)

"""**Conclus√£o**: Apesar de ter sido poss√≠vel realizar a an√°lise com os dados dispon√≠veis, √© importante destacar que o resultado poderia ter sido melhor se a base de dados fosse mais ampla. A aplica√ß√£o de modelos de aprendizado de m√°quina requer quantidades significativas de dados para alcan√ßar uma precis√£o mais alta. Portanto, √© recomend√°vel que futuras an√°lises sejam realizadas com bases de dados maiores para aprimorar ainda mais os resultados.

**Modelo ARIMA**: √© uma boa escolha para prever s√©ries temporais, pois ele √© capaz de capturar tend√™ncias e sazonalidade em dados. Al√©m disso, ele √© eficiente em lidar com dados com ru√≠do e flutua√ß√µes sazonais.

**Regress√£o Log√≠stica**: A regress√£o log√≠stica √© uma boa escolha quando voc√™ quer prever a probabilidade de uma vari√°vel categ√≥rica. Neste caso, pode ser usado para prever se um dia ser√° de semana ou final de semana.

**Random Forest**: O modelo Random Forest √© baseada em √°rvores de decis√£o, que √© uma boa escolha quando voc√™ quer prever uma vari√°vel cont√≠nua com base em v√°rias vari√°veis explicativas. Neste caso, pode ser usado para prever o volume de vendas com base em outras informa√ß√µes, como o dia da semana.

Estes s√£o os motivos pelos quais estes modelos foram escolhidos. Cada modelo tem suas pr√≥prias for√ßas e fraquezas, e a escolha do melhor modelo depende das caracter√≠sticas dos dados.
"""